/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csc407groupproject;

import java.util.Random;

/**
 *
 * @author Carlos D Maldonado Lizardo
 */
public class Csc407GroupProject {

    /**
     * @param args the command line arguments
     */
    //1. Initialize array for population, and immunity, and saves number of infected each round
    public static int[] popInfected = new int[1000];
    public static int[] popImmune = new int[1000];
    public static int[] roundInfected = new int [2000];

    //initialise round counter, and infected counter;
    public static int rounds = 2000;
    public static int infectedCounter = 0;
    public static int healthyCounter = 0;

    public static void main(String[] args) {

        //first infected indavidual
        popInfected[1] = 1;

        //2. initialize contact variable between 0 and 1. and threashhold for contact
        double contact;
        //2. used for finding random number between 0 and 1
        contact = Math.random();
        //3. Initialize Infection variable between 0 and 1 and threashholt for infection
        double infectedThreashhold = 0.001;
        //3. Used for finding random number between 0 and 1
        //infectedThreashhold = Math.random();

        //4. main loop for running round method and reader method
        for(int i = 0; i < rounds; i++){
        infectionRounds(contact, infectedThreashhold);
        numberInfected();
        roundInfected[i] = infectedCounter;
            //System.out.println(roundInfected[i]);
        }

    linearRegression();
    }

    //4. Method for outputing and find the number if infected each round for 2000 rounds
    public static void numberInfected() {
        infectedCounter = 0;
        for (int i = 0; i < popInfected.length; i++) {
            if (popInfected[i] > 0) {
                infectedCounter++;
            }
        }
        
        System.out.println(infectedCounter);
        
    }

    public static void infectionRounds(double contact, double infectedThreashhold) {
        //Initialize variable needed
        int contactWith;
        double infect;
        //First loop goes through all 1000 people
        for (int i = 0; i < 1000; i++) {

            //2. finds the ratio of people needed the person will come into contact with
            contact = Math.random();
            contact = (int)(1000 * contact);
            //checks if the indavidual is infected
            if (popInfected[i] > 0) {

                //loop for infected indavidual
                for (int j = 0; j < contact; j++) {
                    //random person to be in contact with
                    contactWith = (int) (Math.random() * 1000) + 0;

                    //checks if the person they come into contact with is infected, and not immune if not moves on
                    if (popInfected[contactWith] == 0 && popImmune[contactWith] == 0) {
                        //3. infection chance
                        infect = Math.random();

                        //3. checks if it meets threashhold
                        if (infect < infectedThreashhold) {
                            popInfected[contactWith] = 1;
                            
                        }

                    }
                }
            } else {
                
                //loop for non infected person
                for (int j = 0; j < contact; j++) {
                    //random person they will come into contact with
                    contactWith = (int) (Math.random() * 1000) + 0;

                    //checks if they are infected, and no one is Immune, if not move on
                    if (popInfected[contactWith] > 0) {
                        //infection chance
                        infect = Math.random();

                        //checks if it meet threashhold
                        if (infect < infectedThreashhold) {
                            popInfected[contactWith] = 1;
                        }

                    }
                }
            }

            
        }
        //At the end of the round array infected is updated to next round and check if the person is immune
        for(int i = 0; i < 1000; i++){
            //checks if they are infected, if they are increases their counter by 1
            if (popInfected[i] > 0){
                popInfected[i]++;
                //if there infected for more that 5 rounds resets their infected counter and start their immune counter
                if(popInfected[i] > 5){
                    popInfected[i] = 0;
                    popImmune[i] = 1;
                }
            }
        }
        //At the end of the round all people Immune are updated
        for(int i = 0;  i < 1000; i++){
            //check if person has immunity, and if they do increases its counter by 1
            if(popImmune[i] != 0){
                popImmune[i]++;
                //if they reach 5+ then resets their immunity to 0 so they can be infected again also resets their infected counter
                if(popImmune[i] > 5){
                    popImmune[i] = 0;
                    
                }
            }
        }
        
        
    }
    
    public static void linearRegression(){
        double x=0, y = 0, x2=0, y2=0, eX, eY = 0, eXY=0, eX2=0, eY2=0;
        double a = 0;
        double b = 0;
        eX = 2001000;
        
        //sum for all y values
        for (int i = 0; i < 2000; i++){
            eY = eY + roundInfected[i];
        }
        //System.out.println(eY);
        // for all X*y
        for (int i = 0; i < 2000; i++){
            y = roundInfected[i];
            eXY = eXY + (i * y);
        }
        //System.out.println(eXY);
        //sum for all x sqaured
        for (int i = 0; i < 2000; i++){
            x2 = i * i;
            eX2 = eX2 + x2;
        }
        //System.out.println(eX2);
        // sum for all y sqaured
        for (int i = 0; i < 2000; i++){
            y2 = roundInfected[i] * roundInfected[i];
            eY2 = eY2 + y2;
        }
        //System.out.println(eY2);
        
        a = ((eY * eX2) - (eX * eXY)) / (2000 * (eX2 - (eX * eX)));
        b = ((2000 * eXY) - (eX * eY)) / (2000 * (eX2 - (eX * eX)));
        System.out.println(a);
        System.out.println(b);
    }
}
